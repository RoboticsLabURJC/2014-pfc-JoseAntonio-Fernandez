# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `mission.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module jderobot
_M_jderobot = Ice.openModule('jderobot')
__name__ = 'jderobot'

if 'Pose3DData' not in _M_jderobot.__dict__:
    _M_jderobot.Pose3DData = Ice.createTempClass()
    class Pose3DData(Ice.Object):
        """
        Pose3D data information
        """
        def __init__(self, x=0.0, y=0.0, z=0.0, h=0.0, q0=0.0, q1=0.0, q2=0.0, q3=0.0):
            self.x = x
            self.y = y
            self.z = z
            self.h = h
            self.q0 = q0
            self.q1 = q1
            self.q2 = q2
            self.q3 = q3

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::Pose3DData')

        def ice_id(self, current=None):
            return '::jderobot::Pose3DData'

        def ice_staticId():
            return '::jderobot::Pose3DData'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Pose3DData)

        __repr__ = __str__

    _M_jderobot.Pose3DDataPrx = Ice.createTempClass()
    class Pose3DDataPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.Pose3DDataPrx.ice_checkedCast(proxy, '::jderobot::Pose3DData', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.Pose3DDataPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::Pose3DData'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_Pose3DDataPrx = IcePy.defineProxy('::jderobot::Pose3DData', Pose3DDataPrx)

    _M_jderobot._t_Pose3DData = IcePy.defineClass('::jderobot::Pose3DData', Pose3DData, -1, (), False, False, None, (), (
        ('x', (), IcePy._t_float, False, 0),
        ('y', (), IcePy._t_float, False, 0),
        ('z', (), IcePy._t_float, False, 0),
        ('h', (), IcePy._t_float, False, 0),
        ('q0', (), IcePy._t_float, False, 0),
        ('q1', (), IcePy._t_float, False, 0),
        ('q2', (), IcePy._t_float, False, 0),
        ('q3', (), IcePy._t_float, False, 0)
    ))
    Pose3DData._ice_type = _M_jderobot._t_Pose3DData

    _M_jderobot.Pose3DData = Pose3DData
    del Pose3DData

    _M_jderobot.Pose3DDataPrx = Pose3DDataPrx
    del Pose3DDataPrx

if '_t_PoseSequence' not in _M_jderobot.__dict__:
    _M_jderobot._t_PoseSequence = IcePy.defineSequence('::jderobot::PoseSequence', (), _M_jderobot._t_Pose3DData)

if 'MissionData' not in _M_jderobot.__dict__:
    _M_jderobot.MissionData = Ice.createTempClass()
    class MissionData(Ice.Object):
        """
        Mission data information
        """
        def __init__(self, mission=None):
            self.mission = mission

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::MissionData')

        def ice_id(self, current=None):
            return '::jderobot::MissionData'

        def ice_staticId():
            return '::jderobot::MissionData'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_MissionData)

        __repr__ = __str__

    _M_jderobot.MissionDataPrx = Ice.createTempClass()
    class MissionDataPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.MissionDataPrx.ice_checkedCast(proxy, '::jderobot::MissionData', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.MissionDataPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::MissionData'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_MissionDataPrx = IcePy.defineProxy('::jderobot::MissionData', MissionDataPrx)

    _M_jderobot._t_MissionData = IcePy.declareClass('::jderobot::MissionData')

    _M_jderobot._t_MissionData = IcePy.defineClass('::jderobot::MissionData', MissionData, -1, (), False, False, None, (), (('mission', (), _M_jderobot._t_PoseSequence, False, 0),))
    MissionData._ice_type = _M_jderobot._t_MissionData

    _M_jderobot.MissionData = MissionData
    del MissionData

    _M_jderobot.MissionDataPrx = MissionDataPrx
    del MissionDataPrx

if 'Mission' not in _M_jderobot.__dict__:
    _M_jderobot.Mission = Ice.createTempClass()
    class Mission(Ice.Object):
        """
        Interface to the Mission.
        """
        def __init__(self):
            if Ice.getType(self) == _M_jderobot.Mission:
                raise RuntimeError('jderobot.Mission is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::jderobot::Mission')

        def ice_id(self, current=None):
            return '::jderobot::Mission'

        def ice_staticId():
            return '::jderobot::Mission'
        ice_staticId = staticmethod(ice_staticId)

        def getMissionData(self, current=None):
            pass

        def setMissionData(self, data, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_jderobot._t_Mission)

        __repr__ = __str__

    _M_jderobot.MissionPrx = Ice.createTempClass()
    class MissionPrx(Ice.ObjectPrx):

        def getMissionData(self, _ctx=None):
            return _M_jderobot.Mission._op_getMissionData.invoke(self, ((), _ctx))

        def begin_getMissionData(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Mission._op_getMissionData.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getMissionData(self, _r):
            return _M_jderobot.Mission._op_getMissionData.end(self, _r)

        def setMissionData(self, data, _ctx=None):
            return _M_jderobot.Mission._op_setMissionData.invoke(self, ((data, ), _ctx))

        def begin_setMissionData(self, data, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_jderobot.Mission._op_setMissionData.begin(self, ((data, ), _response, _ex, _sent, _ctx))

        def end_setMissionData(self, _r):
            return _M_jderobot.Mission._op_setMissionData.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_jderobot.MissionPrx.ice_checkedCast(proxy, '::jderobot::Mission', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_jderobot.MissionPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::jderobot::Mission'
        ice_staticId = staticmethod(ice_staticId)

    _M_jderobot._t_MissionPrx = IcePy.defineProxy('::jderobot::Mission', MissionPrx)

    _M_jderobot._t_Mission = IcePy.defineClass('::jderobot::Mission', Mission, -1, (), True, False, None, (), ())
    Mission._ice_type = _M_jderobot._t_Mission

    Mission._op_getMissionData = IcePy.Operation('getMissionData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_jderobot._t_PoseSequence, False, 0), ())
    Mission._op_setMissionData = IcePy.Operation('setMissionData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_jderobot._t_PoseSequence, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_jderobot.Mission = Mission
    del Mission

    _M_jderobot.MissionPrx = MissionPrx
    del MissionPrx

# End of module jderobot
